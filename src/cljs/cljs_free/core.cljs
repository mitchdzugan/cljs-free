(ns cljs-free.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]
   [cljs-free.free :refer [bind pure interpret fail]]
   [cljs-free.process-tournament :as pt]
   [cljs-free.raw-macros :refer-macros [deffree fdo ffn]]))

(deffree console [gets])

(def do-gets
  (fn [{:keys [next state]}]
    (next (nth (:names state) (:i state))
          (assoc state :i (- 1 (:i state))))))
(def i
  (make-interpreter {gets do-gets}
                    {:names ["joe" "bob"] :i 0}))


(defn ofn [n] (reduce
               (ffn [m _]
                    arr <- m
                    next <- (gets)
                    (pure (conj arr next)))
               (pure [])
               (range n)))



;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to cljs-free"]
     [:button {:onClick
               (fn []
                 (time
                  (let [res (pt/t)]
                    (js/setTimeout
                     (fn [] (.log js/console res))
                     2000)))
                 ; (println (time (get-state (interpret i (bind (ofn 50001) (fn [_] (pure 1)))))))
                 )}
      "hello"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of cljs-free"]]
      [:li [:a {:href "/broken/link"} "Broken link"]]]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of cljs-free"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of cljs-free")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About cljs-free"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About cljs-free"]]]
       [page]
       [:footer
        [:p "cljs-free was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
